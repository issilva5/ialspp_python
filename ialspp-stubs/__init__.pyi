from __future__ import annotations
import numpy
import typing
__all__ = ['Dataset', 'EigenMatrix', 'IALSppRecommender', 'LoadModel', 'ProjectBlock', 'Recommender', 'SaveModel']

class Encoder:
    def insert(self, s: str) -> int:
        ...
    def encode(self, s: str) -> int:
        ...
    def decode(self, i: int) -> str:
        ...
    def size(self) -> int:
        ...

class Dataset:
    def __init__(self, filename: str, string_id: bool = False) -> None:
        ...
    def by_item(self) -> dict[int, list[tuple[int, int]]]:
        ...
    def by_user(self) -> dict[int, list[tuple[int, int]]]:
        ...
    def max_item(self) -> int:
        ...
    def max_user(self) -> int:
        ...
    def num_tuples(self) -> int:
        ...
    def user_encoder(self) -> Encoder:
        ...
    def item_encoder(self) -> Encoder:
        ...

class EigenMatrix:
    def __getitem__(self: numpy.ndarray, row: int) -> float:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, m: numpy.ndarray) -> None:
        ...
    def cols(self: numpy.ndarray) -> int:
        ...
    def rows(self: numpy.ndarray) -> int:
        ...

class IALSppRecommender(Recommender):
    def EvaluateDataset(self, test_train_data: Dataset, test_test_data: dict[int, list[tuple[int, int]]]) -> numpy.ndarray:
        ...
    def EvaluateUser(self, scores: numpy.ndarray, ground_truth: list[tuple[int, int]], exclude: list[tuple[int, int]]) -> numpy.ndarray:
        ...
    def Score(self, user: int, user_history: list[tuple[int, int]]) -> numpy.ndarray:
        ...
    def SetPrintTrainStats(self, print_train_stats: bool) -> None:
        ...
    def Train(self, dataset: Dataset) -> None:
        ...
    def __init__(self, embedding_dim: int, num_users: int, num_items: int, regularization: float, regularization_exp: float, unobserved_weight: float, stddev: float, block_size: int) -> None:
        ...

class Recommender:
    def EvaluateDataset(self, test_train_data: Dataset, test_test_data: dict[int, list[tuple[int, int]]]) -> numpy.ndarray:
        ...
    def EvaluateUser(self, scores: numpy.ndarray, ground_truth: list[tuple[int, int]], exclude: list[tuple[int, int]]) -> numpy.ndarray:
        ...
    def Score(self, user: int, user_history: list[tuple[int, int]]) -> numpy.ndarray:
        ...
    def Train(self, dataset: Dataset) -> None:
        ...

def LoadModel(path: str) -> IALSppRecommender:
    ...

def ProjectBlock(user_history: list[tuple[int, int]], user_embedding: numpy.ndarray, local_user_embedding: numpy.ndarray, local_item_embedding: numpy.ndarray, prediction: numpy.ndarray, local_gramian: numpy.ndarray, local_global_gramian: numpy.ndarray, reg: float, unobserved_weight: float) -> numpy.ndarray:
    """
    Project a block of embeddings
    """

def SaveModel(path: str, model: IALSppRecommender) -> None:
    ...
